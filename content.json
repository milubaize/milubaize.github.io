{"meta":{"title":"xu'Blog","subtitle":"于千万人之间遇见你","description":null,"author":"milubaize","url":"http://yoursite.com"},"pages":[{"title":"分类","date":"2017-11-03T11:54:59.000Z","updated":"2017-11-03T11:59:08.251Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Java面试题","slug":"Java面试题","date":"2015-11-09T11:41:51.000Z","updated":"2017-11-10T10:50:41.475Z","comments":true,"path":"2015/11/09/Java面试题/","link":"","permalink":"http://yoursite.com/2015/11/09/Java面试题/","excerpt":"","text":"1. Java 基础部分 基础部分的顺序：基本语法，类相关的语法，内部类的语法，继承相关的语法，异常的语法，线程的语法，集合的语法，io 的语法，虚拟机方面的语法。 1. 一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？ 可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。 2. Java有没有goto? java中的保留字，现在没有在java中使用。跳出循环用的 3. 说说&amp;和&amp;&amp;的区别。 java中的保留字，现在没有在java中使用。跳出循环用的 4. switch语句能否作用在byte上，能否作用在long上，能否作用在String上? 在switch（expr1）中，expr1只能是一个整数表达式或者String或者枚举常量（更大字体），整数表达式可以是int基本类型或Integer包装类型，由于，byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。显然，long类型不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它们不能作用于swtich语句中。 5 .short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错? 对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。对于short s1 = 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。 6. char型变量中能不能存贮一个中文汉字?为什么?char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。 7. 用最有效率的方法算出2计算结果是8?2 &lt;&lt; 3，因为将一个数左移n位，就相当于乘以了2的n次方，那么，一个数乘以8只要将其左移3位即可，而位运算cpu直接支持的，效率最高，所以，最效率的方法是2 &lt;&lt; 3。","categories":[],"tags":[]},{"title":"Java从零开始（二）","slug":"Java从零开始-1","date":"2015-11-06T13:20:25.000Z","updated":"2017-11-10T10:50:46.380Z","comments":true,"path":"2015/11/06/Java从零开始-1/","link":"","permalink":"http://yoursite.com/2015/11/06/Java从零开始-1/","excerpt":"","text":"今天学习一下Java的三大特性 1. 多态性多态性的存在有三个前提： 要有继承关系 子类重写父类的方法 父类引用指向子类对象 这里引用知乎答主@程序狗 的答案( 链接：https://www.zhihu.com/question/30082151/answer/120520568 )，通俗易懂： 花木兰替父从军 大家都知道花木兰替父从军的例子，花木兰替父亲花弧从军。那么这时候花木兰是子类，花弧是父类。 花弧有自己的成员属性年龄，姓名，性别。花木兰也有这些属性，但是很明显二者的属性完全不一样。花弧有自己的非静态成员方法‘骑马杀敌’，同样花木兰也遗传了父亲一样的方法‘骑马杀敌’。花弧还有一个静态方法‘自我介绍’，每个人都可以问花弧姓甚名谁。同时花木兰还有一个自己特有的非静态成员方法‘涂脂抹粉’。但是，现在花木兰替父从军，女扮男装。这时候相当于父类的引用（花弧这个名字）指向了子类对象（花木兰这个人），那么在其他类（其他的人）中访问子类对象（花木兰这个人）的成员属性（姓名，年龄，性别）时，其实看到的都是花木兰她父亲的名字（花弧）、年龄（60岁）、性别（男）。当访问子类对象（花木兰这个人）的非静态成员方法（骑马打仗）时，其实都是看到花木兰自己运用十八般武艺在骑马打仗。当访问花木兰的静态方法时（自我介绍），花木兰自己都是用她父亲的名字信息在向别人作自我介绍。并且这时候花木兰不能使用自己特有的成员方法‘涂脂抹粉’。—–多态中的向上转型 那么终于一将功成万骨枯，打仗旗开得胜了，花木兰告别了战争生活。有一天，遇到了自己心爱的男人，这时候爱情的力量将父类对象的引用（花弧这个名字）强制转换为子类对象本来的引用（花木兰这个名字），那么花木兰又从新成为了她自己，这时候她完全是她自己了。名字是花木兰，年龄是28，性别是女，打仗依然那样生猛女汉子，自我介绍则堂堂正正地告诉别人我叫花木兰。OMG！终于，终于可以使用自己特有的成员方法‘涂脂抹粉’了。从此，花木兰完全回到了替父从军前的那个花木兰了。并且和自己心爱的男人幸福的过完了一生。—–多态中的向下转型 那么我们可以根据以上情况总结出多态成员访问的特点： 成员变量 编译看左边(父类),运行看左边(父类) 成员方法 编译看左边(父类)，运行看右边(子类)。动态绑定 静态方法 编译看左边(父类)，运行看左边(父类)。 (静态和类相关，算不上重写，所以，访问还是左边的)只有非静态的成员方法,编译看左边,运行看右边. 2. 继承","categories":[{"name":"Java 基础","slug":"Java-基础","permalink":"http://yoursite.com/categories/Java-基础/"}],"tags":[]},{"title":"Java从零开始(一)","slug":"Java从零开始","date":"2015-11-05T11:15:51.000Z","updated":"2017-11-10T10:50:36.793Z","comments":true,"path":"2015/11/05/Java从零开始/","link":"","permalink":"http://yoursite.com/2015/11/05/Java从零开始/","excerpt":"","text":"最近一直不在学习状态，决定恶补Java 基础 Java一直都是值传递。 1. 什么是面向对象编程 说到面向对象，就要提起面向过程，那么它们有什么区别呢？ 1.1 面向过程 概念:分析解决问题的所需要的步骤，然后用函数一步一步的调用实现，就是把一个事务分解成一个个步骤。 例如：把大象放入冰箱这件事情 1.打开冰箱 2.放入大象 3.关闭冰箱 这就是面向过程编程，思想是注重做事的过程。 1.2 面向对象概念:OOP（Object Oriented Programming）面向对象关注的是哪些事物有什么样的功能，强调的是具体的事物 例如：同样的把大象放入冰箱这件事情 分析：会抽象出一类具有某种相同属性和行为的事物 冰箱：具体功能有开冰箱，关闭冰箱 大象：走路 同一件事，面向对象关注的是谁有打开冰箱关闭冰箱的功能，谁有进入冰箱的功能。 总结： 面向对象是以功能来划分，而不是步骤。 编程就是模拟现实生活，我们使用面向对象的思想可以认为万物皆对象。 2. 类的概念在Java中，我们把具有相同属性或者行为的事物抽象成一类。比如猫是一类，是一个概念，并没有具体指某只猫，类中一个具体的对象可以是波斯猫，折耳猫等等 类和对象的关系：就像是模版和样本的关系，通过一个模板可以创建多个当前模板下的样例。 注意：类是概念，对象才是真正的实例。 定义类的语法： 123456class 类名&#123; 属性 方法()&#125; 我们可以根据类来创建对象创建对象的语法： 类名 变量名 = new 类名(); 用代码来说明一下：1234567891011121314151617181920212223242526272829303132333435363738class Cat&#123; /** 定义猫这个类 */ double weight; double height; String name;/** 定义猫类的方法 */ public void sleep()&#123; System.out.println(name+\"在睡觉\"); &#125;&#125;/** 创建测试类*/class test&#123; public static void main(String[] args)&#123; //创建一个Dog类的对象 Cat cat =new Cat(); //根据对象变量.属性就可以获得或者设置属性的值 cat.name=\"小花\"; System.out.println(\"猫的名字：\"+cat.name); //通过cat对象调用它的方法 cat.sleep(); &#125;&#125; 3. 成员变量和局部变量3.1 局部变量 局部变量是定义在方法中或语句块中的例： 123456public static void printArray(int [] array)&#123; int sum = 0; for(int i = 0; i &lt; array.length; i++)&#123; sum + = i; &#125; &#125; 作用范围：只限于所定义的大括号。 存储的位置：存储在栈内存中。 默认值：无，局部变量必须赋值。 生命周期：所属的大括号结束就消失。 3.2 成员变量（即类的属性） 成员变量是定义在类中，也可以叫类的属性。 作用范围：在整个类中 存储位置：堆内存 默认值：有 生命周期：由jvm通过垃圾回收机制来自动回收。 代码例子： 123456789101112131415161718192021222324252627class Car&#123; String color; double displacement; String brand; public void run()&#123; System.out.println(brand+\"车在跑\"); &#125; public void introduce()&#123; System.out.println(\"我是一款\"+brand+\"的排量是\"+displacement+\"L\"+color+\"的车\"); &#125;&#125;class TestCar&#123; public static void main(String[] args)&#123; //在堆内存中创建了一个car的对象，但是在栈内存中没有变量引用他。 new Car().brand = \"兰博基尼\"; //又在内存中创建了一个匿名对象; new Car().color = \"黄色\"; new Car().introduce(); &#125;&#125; 4. 常量和变量","categories":[{"name":"Java 基础","slug":"Java-基础","permalink":"http://yoursite.com/categories/Java-基础/"}],"tags":[]},{"title":"Next主题优化","slug":"Next主题优化","date":"2015-11-03T12:08:29.000Z","updated":"2017-11-10T10:50:54.424Z","comments":true,"path":"2015/11/03/Next主题优化/","link":"","permalink":"http://yoursite.com/2015/11/03/Next主题优化/","excerpt":"1. Hexo之next主题设置首页不显示全文(只显示预览) 入hexo博客项目的themes/next目录 用文本编辑器打开_config.yml文件 搜索”auto_excerpt”,找到如下部分： # Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post &gt; to control excerpt accurately. auto_excerpt: enable: false length: 150","text":"1. Hexo之next主题设置首页不显示全文(只显示预览) 入hexo博客项目的themes/next目录 用文本编辑器打开_config.yml文件 搜索”auto_excerpt”,找到如下部分： # Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post &gt; to control excerpt accurately. auto_excerpt: enable: false length: 150 把enable改为对应的false改为true就完成了 注：下面的length参数对应的是文章预览的文本长度，可以自己设置。 2. 头像设置编辑 站点配置文件，新增字段 avatar， 值设置成头像的链接地址。 avatar: http://xxxx.jpg 3. 添加页面添加关于页面 1$ hexo new page \"about\" 在source文件夹下就会有about文件夹，编辑index.md，然后进入主题的_config.yml中，menu下的#about注释去掉.","categories":[{"name":"Hexo主题相关","slug":"Hexo主题相关","permalink":"http://yoursite.com/categories/Hexo主题相关/"}],"tags":[]},{"title":"学习Markdown","slug":"MyBlog","date":"2015-10-31T13:41:55.000Z","updated":"2017-11-10T10:52:15.878Z","comments":true,"path":"2015/10/31/MyBlog/","link":"","permalink":"http://yoursite.com/2015/10/31/MyBlog/","excerpt":"什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字。","text":"什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字。 一.标题这是最为常用的格式，在平时常用的的文本编辑器中大多是这样实现的：输入文本、选中文本、设置标题格式。 而在 Markdown 中，你只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。例如： 代码： # 第一级标题 `&lt;h1&gt;` ## 第二级标题 `&lt;h2&gt;` ### 第三级标题 `&lt;h3&gt;` 效果： 第一级标题 &lt;h1&gt;第二级标题 &lt;h2&gt;第三级标题 &lt;h3&gt; 二.引用引用需要在被引用的文本前加上&gt;符号。 代码： &gt; 第一行 &gt; 第二行 &gt; 第三行 效果： 第一行 第二行 第三行 引用的多层嵌套代码： &gt;&gt;&gt; 请问 Markdwon 怎么用啊？ &gt;&gt; &gt;&gt; 自己看百度！ &gt; &gt; 第一行 注：此处代码部分加\\转义可以让符号原样显示，不被解析成对应的markdown语法 效果： 请问 Markdwon 怎么用啊？ 自己看百度！ 不会啊！ 代码高亮着色使用 \\.....```123456 效果``` bash$ hexo d -g","categories":[{"name":"Markdown基础","slug":"Markdown基础","permalink":"http://yoursite.com/categories/Markdown基础/"}],"tags":[]}]}