{"meta":{"title":"xu'Blog","subtitle":"于千万人之间遇见你","description":null,"author":"milubaize","url":"http://yoursite.com"},"pages":[{"title":"分类","date":"2017-11-03T11:54:59.000Z","updated":"2017-11-03T11:59:08.251Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Java从零开始（二）","slug":"Java从零开始-1","date":"2017-11-06T13:20:25.000Z","updated":"2017-11-06T13:45:12.388Z","comments":true,"path":"2017/11/06/Java从零开始-1/","link":"","permalink":"http://yoursite.com/2017/11/06/Java从零开始-1/","excerpt":"","text":"今天学习一下Java的三大特性 1. 多态性多态性的存在有三个前提： 要有继承关系 子类重写父类的方法 父类引用指向子类对象 首先我们定义两个类，一个父类Animal，一个子类Cat 123456789101112131415class Animal&#123; int num = 10; static int age = 20; public void eat()&#123; System.out.println(\"动物在吃饭\"); &#125; public void run()&#123; System.out.println(\"动物在跑步\"); &#125; public void sleep()&#123; System.out.println(\"动物在睡觉\"); &#125;&#125; 子类Cat12345678910111213141516class Cat extends Animal&#123; int num = 80; static int age = 90; String name=\"tomcat\" public void eat()&#123; System.out.println(\"猫在吃饭\"); &#125; public void run()&#123; System.out.println(\"猫在跑步\"); &#125; public void sleep()&#123; System.out.println(\"猫在睡觉\"); &#125;&#125;","categories":[{"name":"Java 基础","slug":"Java-基础","permalink":"http://yoursite.com/categories/Java-基础/"}],"tags":[]},{"title":"Java从零开始(一)","slug":"Java从零开始","date":"2017-11-05T11:15:51.000Z","updated":"2017-11-05T12:14:02.023Z","comments":true,"path":"2017/11/05/Java从零开始/","link":"","permalink":"http://yoursite.com/2017/11/05/Java从零开始/","excerpt":"","text":"最近一直不在学习状态，决定恶补Java 基础 1. 什么是面向对象编程 说到面向对象，就要提起面向过程，那么它们有什么区别呢？ 1.1 面向过程 概念:分析解决问题的所需要的步骤，然后用函数一步一步的调用实现，就是把一个事务分解成一个个步骤。 例如：把大象放入冰箱这件事情 1.打开冰箱 2.放入大象 3.关闭冰箱 这就是面向过程编程，思想是注重做事的过程。 1.2 面向对象概念:OOP（Object Oriented Programming）面向对象关注的是哪些事物有什么样的功能，强调的是具体的事物 例如：同样的把大象放入冰箱这件事情 分析：会抽象出一类具有某种相同属性和行为的事物 冰箱：具体功能有开冰箱，关闭冰箱 大象：走路 同一件事，面向对象关注的是谁有打开冰箱关闭冰箱的功能，谁有进入冰箱的功能。 总结： 面向对象是以功能来划分，而不是步骤。 编程就是模拟现实生活，我们使用面向对象的思想可以认为万物皆对象。 2. 类的概念在Java中，我们把具有相同属性或者行为的事物抽象成一类。比如猫是一类，是一个概念，并没有具体指某只猫，类中一个具体的对象可以是波斯猫，折耳猫等等 类和对象的关系：就像是模版和样本的关系，通过一个模板可以创建多个当前模板下的样例。 注意：类是概念，对象才是真正的实例。 定义类的语法： 123456class 类名&#123; 属性 方法()&#125; 我们可以根据类来创建对象创建对象的语法： 类名 变量名 = new 类名(); 用代码来说明一下：1234567891011121314151617181920212223242526272829303132333435363738class Cat&#123; /** 定义猫这个类 */ double weight; double height; String name;/** 定义猫类的方法 */ public void sleep()&#123; System.out.println(name+\"在睡觉\"); &#125;&#125;/** 创建测试类*/class test&#123; public static void main(String[] args)&#123; //创建一个Dog类的对象 Cat cat =new Cat(); //根据对象变量.属性就可以获得或者设置属性的值 cat.name=\"小花\"; System.out.println(\"猫的名字：\"+cat.name); //通过cat对象调用它的方法 cat.sleep(); &#125;&#125; 3. 成员变量和局部变量3.1 局部变量 局部变量是定义在方法中或语句块中的例： 123456public static void printArray(int [] array)&#123; int sum = 0; for(int i = 0; i &lt; array.length; i++)&#123; sum + = i; &#125; &#125; 作用范围：只限于所定义的大括号。 存储的位置：存储在栈内存中。 默认值：无，局部变量必须赋值。 生命周期：所属的大括号结束就消失。 3.2 成员变量（即类的属性） 成员变量是定义在类中，也可以叫类的属性。 作用范围：在整个类中 存储位置：堆内存 默认值：有 生命周期：由jvm通过垃圾回收机制来自动回收。 代码例子： 123456789101112131415161718192021222324252627class Car&#123; String color; double displacement; String brand; public void run()&#123; System.out.println(brand+\"车在跑\"); &#125; public void introduce()&#123; System.out.println(\"我是一款\"+brand+\"的排量是\"+displacement+\"L\"+color+\"的车\"); &#125;&#125;class TestCar&#123; public static void main(String[] args)&#123; //在堆内存中创建了一个car的对象，但是在栈内存中没有变量引用他。 new Car().brand = \"兰博基尼\"; //又在内存中创建了一个匿名对象; new Car().color = \"黄色\"; new Car().introduce(); &#125;&#125;","categories":[{"name":"Java 基础","slug":"Java-基础","permalink":"http://yoursite.com/categories/Java-基础/"}],"tags":[]},{"title":"Next主题优化","slug":"Next主题优化","date":"2017-11-03T12:08:29.000Z","updated":"2017-11-05T11:15:21.686Z","comments":true,"path":"2017/11/03/Next主题优化/","link":"","permalink":"http://yoursite.com/2017/11/03/Next主题优化/","excerpt":"1. Hexo之next主题设置首页不显示全文(只显示预览) 入hexo博客项目的themes/next目录 用文本编辑器打开_config.yml文件 搜索”auto_excerpt”,找到如下部分： # Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post &gt; to control excerpt accurately. auto_excerpt: enable: false length: 150","text":"1. Hexo之next主题设置首页不显示全文(只显示预览) 入hexo博客项目的themes/next目录 用文本编辑器打开_config.yml文件 搜索”auto_excerpt”,找到如下部分： # Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post &gt; to control excerpt accurately. auto_excerpt: enable: false length: 150 把enable改为对应的false改为true就完成了 注：下面的length参数对应的是文章预览的文本长度，可以自己设置。 2. 头像设置编辑 站点配置文件，新增字段 avatar， 值设置成头像的链接地址。 avatar: http://xxxx.jpg 3. 添加页面添加关于页面 1$ hexo new page \"about\" 在source文件夹下就会有about文件夹，编辑index.md，然后进入主题的_config.yml中，menu下的#about注释去掉.","categories":[{"name":"Hexo主题相关","slug":"Hexo主题相关","permalink":"http://yoursite.com/categories/Hexo主题相关/"}],"tags":[]},{"title":"学习Markdown","slug":"MyBlog","date":"2017-10-31T13:41:55.000Z","updated":"2017-11-05T10:56:26.359Z","comments":true,"path":"2017/10/31/MyBlog/","link":"","permalink":"http://yoursite.com/2017/10/31/MyBlog/","excerpt":"什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字。","text":"什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字。 一.标题这是最为常用的格式，在平时常用的的文本编辑器中大多是这样实现的：输入文本、选中文本、设置标题格式。 而在 Markdown 中，你只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。例如： 代码： # 第一级标题 `&lt;h1&gt;` ## 第二级标题 `&lt;h2&gt;` ### 第三级标题 `&lt;h3&gt;` 效果： 第一级标题 &lt;h1&gt;第二级标题 &lt;h2&gt;第三级标题 &lt;h3&gt; 二.引用引用需要在被引用的文本前加上&gt;符号。 代码： &gt; 第一行 &gt; 第二行 &gt; 第三行 效果： 第一行 第二行 第三行 引用的多层嵌套代码： &gt;&gt;&gt; 请问 Markdwon 怎么用啊？ &gt;&gt; &gt;&gt; 自己看百度！ &gt; &gt; 第一行 注：此处代码部分加\\转义可以让符号原样显示，不被解析成对应的markdown语法 效果： 请问 Markdwon 怎么用啊？ 自己看百度！ 不会啊！ 代码高亮着色使用 \\.....```123456 效果``` bash$ hexo d -g","categories":[{"name":"Markdown基础","slug":"Markdown基础","permalink":"http://yoursite.com/categories/Markdown基础/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-10-31T10:50:51.096Z","updated":"2017-11-04T14:47:03.353Z","comments":true,"path":"2017/10/31/hello-world/","link":"","permalink":"http://yoursite.com/2017/10/31/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}