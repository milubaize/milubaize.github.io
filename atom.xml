<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xu&#39;Blog</title>
  
  <subtitle>于千万人之间遇见你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-18T12:46:20.903Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>milubaize</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java面试题</title>
    <link href="http://yoursite.com/2017/11/09/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/09/Java面试题/</id>
    <published>2017-11-09T11:41:51.000Z</published>
    <updated>2017-11-18T12:46:20.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Java-基础部分"><a href="#1-Java-基础部分" class="headerlink" title="1. Java 基础部分"></a>1. Java 基础部分</h2><blockquote><p>基础部分的顺序：基本语法，类相关的语法，内部类的语法，继承相关的语法，异常的语法，线程的语法，集合的语法，io 的语法，虚拟机方面的语法。</p></blockquote><h3 id="1-一个”-java”源文件中是否可以包括多个类（不是内部类）？有什么限制？"><a href="#1-一个”-java”源文件中是否可以包括多个类（不是内部类）？有什么限制？" class="headerlink" title="1. 一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？"></a>1. 一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？</h3> <font color="#90caaf">可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。</font><h3 id="2-Java有没有goto"><a href="#2-Java有没有goto" class="headerlink" title="2. Java有没有goto?"></a>2. Java有没有goto?</h3> <font color="#90caaf">java中的保留字，现在没有在java中使用。跳出循环用的</font><h3 id="3-说说-amp-和-amp-amp-的区别。"><a href="#3-说说-amp-和-amp-amp-的区别。" class="headerlink" title="3. 说说&amp;和&amp;&amp;的区别。"></a>3. 说说&amp;和&amp;&amp;的区别。</h3> <font color="#90caaf">&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。<br>&amp;&amp;还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str != null &amp;&amp; !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&amp;&amp;改为&amp;，则会抛出NullPointerException异常。If(x==33 &amp; ++y&gt;0) y会增长，If(x==33 &amp;&amp; ++y&gt;0)不会增长<br></font><h3 id="4-switch语句能否作用在byte上，能否作用在long上，能否作用在String上"><a href="#4-switch语句能否作用在byte上，能否作用在long上，能否作用在String上" class="headerlink" title="4. switch语句能否作用在byte上，能否作用在long上，能否作用在String上?"></a>4. switch语句能否作用在byte上，能否作用在long上，能否作用在String上?</h3> <font color="#90caaf">在switch（expr1）中，expr1只能是一个整数表达式或者String或者枚举常量（更大字体），整数表达式可以是int基本类型或Integer包装类型，由于，byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。显然，long类型不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它们不能作用于swtich语句中。</font><h3 id="5-short-s1-1-s1-s1-1-有什么错-short-s1-1-s1-1-有什么错"><a href="#5-short-s1-1-s1-s1-1-有什么错-short-s1-1-s1-1-有什么错" class="headerlink" title="5 .short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?"></a>5 .short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?</h3> <font color="#90caaf">对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。<br><br>对于short s1 = 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。<br></font><h3 id="6-char型变量中能不能存贮一个中文汉字-为什么"><a href="#6-char型变量中能不能存贮一个中文汉字-为什么" class="headerlink" title="6. char型变量中能不能存贮一个中文汉字?为什么?"></a>6. char型变量中能不能存贮一个中文汉字?为什么?</h3><font color="#90caaf">char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。</font><h3 id="7-用最有效率的方法算出2计算结果是8"><a href="#7-用最有效率的方法算出2计算结果是8" class="headerlink" title="7. 用最有效率的方法算出2计算结果是8?"></a>7. 用最有效率的方法算出2计算结果是8?</h3><font color="#90caaf">2 &lt;&lt; 3，<br>因为将一个数左移n位，就相当于乘以了2的n次方，那么，一个数乘以8只要将其左移3位即可，而位运算cpu直接支持的，效率最高，所以，最效率的方法是2 &lt;&lt; 3。<br></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Java-基础部分&quot;&gt;&lt;a href=&quot;#1-Java-基础部分&quot; class=&quot;headerlink&quot; title=&quot;1. Java 基础部分&quot;&gt;&lt;/a&gt;1. Java 基础部分&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;基础部分的顺序：基本语法，类相关的语法
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Next主题优化</title>
    <link href="http://yoursite.com/2016/11/03/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/11/03/Next主题优化/</id>
    <published>2016-11-03T12:08:29.000Z</published>
    <updated>2017-11-10T11:36:27.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Hexo之next主题设置首页不显示全文-只显示预览"><a href="#1-Hexo之next主题设置首页不显示全文-只显示预览" class="headerlink" title="1. Hexo之next主题设置首页不显示全文(只显示预览)"></a>1. Hexo之next主题设置首页不显示全文(只显示预览)</h2><ul><li>入hexo博客项目的themes/next目录</li><li>用文本编辑器打开_config.yml文件</li><li>搜索”auto_excerpt”,找到如下部分：</li></ul><blockquote><p># Automatically Excerpt. Not recommand.<br># Please use <code>&lt;!-- more --&gt;</code> in the post &gt; to control excerpt accurately.<br>   auto_excerpt:<br>   enable: false<br>   length: 150<br> <a id="more"></a></p></blockquote><ul><li>把enable改为对应的false改为true就完成了</li></ul><p><font color="#F08080" size="">注：下面的length参数对应的是文章预览的文本长度，可以自己设置。</font>  <br>  </p><h2 id="2-头像设置"><a href="#2-头像设置" class="headerlink" title="2. 头像设置"></a>2. 头像设置</h2><p>编辑 站点配置文件，新增字段 avatar， 值设置成头像的链接地址。</p><blockquote><p>avatar: <a href="http://xxxx.jpg" target="_blank" rel="external">http://xxxx.jpg</a></p></blockquote><h2 id="3-添加页面"><a href="#3-添加页面" class="headerlink" title="3. 添加页面"></a>3. 添加页面</h2><p>添加<code>关于</code>页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page <span class="string">"about"</span></div></pre></td></tr></table></figure><p>在source文件夹下就会有about文件夹，编辑index.md，然后进入主题的_config.yml中，menu下的#about注释去掉.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Hexo之next主题设置首页不显示全文-只显示预览&quot;&gt;&lt;a href=&quot;#1-Hexo之next主题设置首页不显示全文-只显示预览&quot; class=&quot;headerlink&quot; title=&quot;1. Hexo之next主题设置首页不显示全文(只显示预览)&quot;&gt;&lt;/a&gt;1. Hexo之next主题设置首页不显示全文(只显示预览)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;入hexo博客项目的themes/next目录&lt;/li&gt;
&lt;li&gt;用文本编辑器打开_config.yml文件&lt;/li&gt;
&lt;li&gt;搜索”auto_excerpt”,找到如下部分：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;# Automatically Excerpt. Not recommand.&lt;br&gt;# Please use &lt;code&gt;&amp;lt;!-- more --&amp;gt;&lt;/code&gt; in the post &amp;gt; to control excerpt accurately.&lt;br&gt;   auto_excerpt:&lt;br&gt;   enable: false&lt;br&gt;   length: 150&lt;br&gt;
    
    </summary>
    
      <category term="Hexo主题相关" scheme="http://yoursite.com/categories/Hexo%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>学习Markdown</title>
    <link href="http://yoursite.com/2016/10/31/MyBlog/"/>
    <id>http://yoursite.com/2016/10/31/MyBlog/</id>
    <published>2016-10-31T13:41:55.000Z</published>
    <updated>2017-11-10T11:36:28.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h1><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字。<br><a id="more"></a></p><h2 id="一-标题"><a href="#一-标题" class="headerlink" title="一.标题"></a>一.标题</h2><p>这是最为常用的格式，在平时常用的的文本编辑器中大多是这样实现的：输入文本、选中文本、设置标题格式。</p><p>而在 Markdown 中，你只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。例如：</p><p>代码：</p><pre><code># 第一级标题   `&lt;h1&gt;`## 第二级标题    `&lt;h2&gt;`### 第三级标题     `&lt;h3&gt;`</code></pre><p> 效果：</p><blockquote><h1 id="第一级标题-lt-h1-gt"><a href="#第一级标题-lt-h1-gt" class="headerlink" title="第一级标题   &lt;h1&gt;"></a>第一级标题   <code>&lt;h1&gt;</code></h1><h2 id="第二级标题-lt-h2-gt"><a href="#第二级标题-lt-h2-gt" class="headerlink" title="第二级标题   &lt;h2&gt;"></a>第二级标题   <code>&lt;h2&gt;</code></h2><h3 id="第三级标题-lt-h3-gt"><a href="#第三级标题-lt-h3-gt" class="headerlink" title="第三级标题    &lt;h3&gt;"></a>第三级标题    <code>&lt;h3&gt;</code></h3></blockquote><h2 id="二-引用"><a href="#二-引用" class="headerlink" title="二.引用"></a>二.引用</h2><p>引用需要在被引用的文本前加上&gt;符号。</p><p>代码：</p><pre><code>&gt; 第一行   &gt; 第二行    &gt; 第三行     </code></pre><p> 效果：</p><blockquote><p> 第一行  </p><p> 第二行   </p><p> 第三行   </p></blockquote><h3 id="引用的多层嵌套"><a href="#引用的多层嵌套" class="headerlink" title="引用的多层嵌套"></a>引用的多层嵌套</h3><p>代码：</p><pre><code>&gt;&gt;&gt; 请问 Markdwon 怎么用啊？  &gt;&gt;&gt;&gt; 自己看百度！ &gt;&gt; 第一行     </code></pre><p><font color="#F08080" size="2">注：此处代码部分加\转义可以让符号原样显示，不被解析成对应的markdown语法</font>  <br><br>效果：</p><blockquote><blockquote><blockquote><p>请问 Markdwon 怎么用啊？  </p></blockquote><p>自己看百度！ </p></blockquote><p>不会啊！ </p></blockquote><h3 id="代码高亮着色"><a href="#代码高亮着色" class="headerlink" title="代码高亮着色"></a>代码高亮着色</h3><p>使用 \<figure class="highlight bash"><figcaption><span>.....```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  </div><div class="line">效果</div><div class="line"></div><div class="line">``` bash</div><div class="line">$ hexo d -g</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是-Markdown&quot;&gt;&lt;a href=&quot;#什么是-Markdown&quot; class=&quot;headerlink&quot; title=&quot;什么是 Markdown&quot;&gt;&lt;/a&gt;什么是 Markdown&lt;/h1&gt;&lt;p&gt;Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，&lt;strong&gt;粗体&lt;/strong&gt; 或者 &lt;em&gt;斜体&lt;/em&gt; 某些文字。&lt;br&gt;
    
    </summary>
    
      <category term="Markdown基础" scheme="http://yoursite.com/categories/Markdown%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java从零开始（二）</title>
    <link href="http://yoursite.com/2015/11/06/Java%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B-1/"/>
    <id>http://yoursite.com/2015/11/06/Java从零开始-1/</id>
    <published>2015-11-06T13:20:25.000Z</published>
    <updated>2017-11-10T10:50:46.380Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习一下Java的三大特性</p><h2 id="1-多态性"><a href="#1-多态性" class="headerlink" title="1. 多态性"></a>1. 多态性</h2><p>多态性的存在有三个前提：</p><ul><li>要有继承关系</li><li>子类重写父类的方法</li><li>父类引用指向子类对象</li></ul><p>这里引用知乎答主@程序狗 的答案<br>( 链接：<a href="https://www.zhihu.com/question/30082151/answer/120520568" target="_blank" rel="external">https://www.zhihu.com/question/30082151/answer/120520568</a> )，通俗易懂：</p><p>  <code>花木兰替父从军</code></p><blockquote><p>大家都知道花木兰替父从军的例子，花木兰替父亲花弧从军。那么这时候花木兰是子类，花弧是父类。</p><p>花弧有自己的成员属性年龄，姓名，性别。花木兰也有这些属性，但是很明显二者的属性完全不一样。花弧有自己的非静态成员方法‘骑马杀敌’，同样花木兰也遗传了父亲一样的方法‘骑马杀敌’。花弧还有一个静态方法‘自我介绍’，每个人都可以问花弧姓甚名谁。同时花木兰还有一个自己特有的非静态成员方法‘涂脂抹粉’。但是，现在花木兰替父从军，女扮男装。这时候相当于父类的引用（花弧这个名字）指向了子类对象（花木兰这个人），那么在其他类（其他的人）中访问子类对象（花木兰这个人）的成员属性（姓名，年龄，性别）时，其实看到的都是花木兰她父亲的名字（花弧）、年龄（60岁）、性别（男）。当访问子类对象（花木兰这个人）的非静态成员方法（骑马打仗）时，其实都是看到花木兰自己运用十八般武艺在骑马打仗。当访问花木兰的静态方法时（自我介绍），花木兰自己都是用她父亲的名字信息在向别人作自我介绍。并且这时候花木兰不能使用自己特有的成员方法‘涂脂抹粉’。—–多态中的向上转型 那么终于一将功成万骨枯，打仗旗开得胜了，花木兰告别了战争生活。有一天，遇到了自己心爱的男人，这时候爱情的力量将父类对象的引用（花弧这个名字）强制转换为子类对象本来的引用（花木兰这个名字），那么花木兰又从新成为了她自己，这时候她完全是她自己了。名字是花木兰，年龄是28，性别是女，打仗依然那样生猛女汉子，自我介绍则堂堂正正地告诉别人我叫花木兰。OMG！终于，终于可以使用自己特有的成员方法‘涂脂抹粉’了。从此，花木兰完全回到了替父从军前的那个花木兰了。并且和自己心爱的男人幸福的过完了一生。—–多态中的向下转型</p></blockquote><p>那么我们可以根据以上情况总结出多态成员访问的特点：</p><p><b>成员变量</b></p><ul><li>编译看左边(父类),运行看左边(父类)</li></ul><p><b>成员方法</b></p><ul><li>编译看左边(父类)，运行看右边(子类)。动态绑定</li></ul><p><b>静态方法</b></p><ul><li>编译看左边(父类)，运行看左边(父类)。</li></ul><p>(静态和类相关，算不上重写，所以，访问还是左边的)<br>只有非静态的成员方法,编译看左边,运行看右边.</p><h2 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天学习一下Java的三大特性&lt;/p&gt;
&lt;h2 id=&quot;1-多态性&quot;&gt;&lt;a href=&quot;#1-多态性&quot; class=&quot;headerlink&quot; title=&quot;1. 多态性&quot;&gt;&lt;/a&gt;1. 多态性&lt;/h2&gt;&lt;p&gt;多态性的存在有三个前提：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要有继承关系&lt;
      
    
    </summary>
    
      <category term="Java 基础" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java从零开始(一)</title>
    <link href="http://yoursite.com/2015/11/05/Java%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/"/>
    <id>http://yoursite.com/2015/11/05/Java从零开始/</id>
    <published>2015-11-05T11:15:51.000Z</published>
    <updated>2017-11-17T13:26:51.329Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直不在学习状态，决定恶补Java 基础 Java一直都是值传递。</p><h2 id="1-什么是面向对象编程"><a href="#1-什么是面向对象编程" class="headerlink" title="1. 什么是面向对象编程"></a>1. 什么是面向对象编程</h2><p> 说到面向对象，就要提起面向过程，那么它们有什么区别呢？</p><h3 id="1-1-面向过程"><a href="#1-1-面向过程" class="headerlink" title="1.1 面向过程"></a>1.1 面向过程</h3><p> 概念:分析解决问题的所需要的步骤，然后用函数一步一步的调用实现，就是把一个事务分解成一个个步骤。</p><p>例如：把大象放入冰箱这件事情</p><blockquote><p>1.打开冰箱</p><p>2.放入大象</p><p>3.关闭冰箱</p></blockquote><p>这就是<code>面向过程</code>编程，思想是注重做事的过程。</p><h3 id="1-2-面向对象"><a href="#1-2-面向对象" class="headerlink" title="1.2 面向对象"></a>1.2 面向对象</h3><p>概念:<code>OOP（Object Oriented Programming）</code>面向对象关注的是哪些事物有什么样的功能，强调的是具体的事物</p><p>例如：同样的把大象放入冰箱这件事情</p><p>分析：会抽象出一类具有某种相同属性和行为的事物</p><blockquote><p><code>冰箱</code>：具体功能有开冰箱，关闭冰箱</p><p><code>大象</code>：走路</p></blockquote><p>同一件事，面向对象关注的是谁有打开冰箱关闭冰箱的功能，谁有进入冰箱的功能。</p><p>总结：<font color="#F08080" size=""></font></p><p>面向对象是以功能来划分，而不是步骤。</p><p>编程就是模拟现实生活，我们使用面向对象的思想可以认为<code>万物皆对象</code>。<br>  <br>  </p><h2 id="2-类的概念"><a href="#2-类的概念" class="headerlink" title="2. 类的概念"></a>2. 类的概念</h2><p>在Java中，我们把具有相同属性或者行为的事物抽象成一类。比如猫是一类，是一个概念，并没有具体指某只猫，类中一个具体的对象可以是波斯猫，折耳猫等等</p><p>类和对象的关系：就像是模版和样本的关系，通过一个模板可以创建多个当前模板下的样例。</p><blockquote><font color="#F08080" size="">注意：类是概念，对象才是真正的实例。</font></blockquote><p><br><br>定义类的语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class 类名&#123;</div><div class="line"></div><div class="line">属性</div><div class="line"></div><div class="line">方法()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们可以根据类来创建对象<br>创建对象的语法：</p><blockquote><p>类名 变量名 = new 类名();</p></blockquote><p>用代码来说明一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">class Cat&#123;</div><div class="line">  /**</div><div class="line">     定义猫这个类</div><div class="line">    */</div><div class="line">  double weight;</div><div class="line"></div><div class="line">  double height;</div><div class="line"></div><div class="line">  String name;</div><div class="line"></div><div class="line">/**</div><div class="line">   定义猫类的方法</div><div class="line">  */</div><div class="line"></div><div class="line">  public void <span class="function"><span class="title">sleep</span></span>()&#123;</div><div class="line">      System.out.println(name+<span class="string">"在睡觉"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line">创建测试类</div><div class="line">*/</div><div class="line"></div><div class="line">class <span class="built_in">test</span>&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">    </div><div class="line">    //创建一个Dog类的对象</div><div class="line">    Cat cat =new Cat(); </div><div class="line">    </div><div class="line">    //根据对象变量.属性就可以获得或者设置属性的值</div><div class="line">    cat.name=<span class="string">"小花"</span>;</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"猫的名字："</span>+cat.name);</div><div class="line"></div><div class="line">    //通过cat对象调用它的方法</div><div class="line">    cat.sleep();</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="3-成员变量和局部变量"><a href="#3-成员变量和局部变量" class="headerlink" title="3. 成员变量和局部变量"></a>3. 成员变量和局部变量</h2><h3 id="3-1-局部变量"><a href="#3-1-局部变量" class="headerlink" title="3.1 局部变量"></a>3.1 局部变量</h3><ul><li><p>局部变量是定义在方法中或语句块中的<br>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static void printArray(int [] array)&#123;</div><div class="line">      int sum = 0;</div><div class="line">      <span class="keyword">for</span>(int i = 0; i &lt; array.length; i++)&#123;</div><div class="line">      sum + = i;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>作用范围：只限于所定义的大括号。</p></li><li>存储的位置：存储在栈内存中。</li><li>默认值：无，局部变量必须赋值。</li><li>生命周期：所属的大括号结束就消失。</li></ul><h3 id="3-2-成员变量（即类的属性）"><a href="#3-2-成员变量（即类的属性）" class="headerlink" title="3.2 成员变量（即类的属性）"></a>3.2 成员变量（即类的属性）</h3><ul><li>成员变量是定义在类中，也可以叫类的属性。</li><li>作用范围：在整个类中</li><li>存储位置：堆内存</li><li>默认值：有</li><li>生命周期：由<code>jvm</code>通过垃圾回收机制来自动回收。</li></ul><p>代码例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class Car&#123;</div><div class="line"></div><div class="line">String color;</div><div class="line"></div><div class="line">double displacement;</div><div class="line"></div><div class="line">String brand;</div><div class="line"></div><div class="line">public void <span class="function"><span class="title">run</span></span>()&#123;</div><div class="line">System.out.println(brand+<span class="string">"车在跑"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void <span class="function"><span class="title">introduce</span></span>()&#123;</div><div class="line">System.out.println(<span class="string">"我是一款"</span>+brand+<span class="string">"的排量是"</span>+displacement+<span class="string">"L"</span>+color+<span class="string">"的车"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class TestCar&#123;</div><div class="line"></div><div class="line">public static void main(String[] args)&#123;</div><div class="line">//在堆内存中创建了一个car的对象，但是在栈内存中没有变量引用他。</div><div class="line">new Car().brand = <span class="string">"兰博基尼"</span>;</div><div class="line">//又在内存中创建了一个匿名对象;</div><div class="line">new Car().color = <span class="string">"黄色"</span>;</div><div class="line">new Car().introduce();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-常量和变量"><a href="#4-常量和变量" class="headerlink" title="4. 常量和变量"></a>4. 常量和变量</h2><ul><li><p>开辟内存空间（JVM）</p></li><li><p>提取数据（.class）</p></li><li><p>cpu调度运行</p></li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>在程序运行的过程中存储可以变化的数据的量（内存的空）就叫做变量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一直不在学习状态，决定恶补Java 基础 Java一直都是值传递。&lt;/p&gt;
&lt;h2 id=&quot;1-什么是面向对象编程&quot;&gt;&lt;a href=&quot;#1-什么是面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是面向对象编程&quot;&gt;&lt;/a&gt;1. 什么是面向对
      
    
    </summary>
    
      <category term="Java 基础" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
